<?php
/**
 * the main administration function
 *
 * @author       The PostNuke Development Team
 * @return       output       The main module admin page.
 */
function UserPictures_admin_main()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    $action=pnVarCleanFromInput('action');
    if (isset($action)) {
	if (!pnSecConfirmAuthKey()) {
    	    pnSessionSetVar('errormsg', _BADAUTHKEY);
	    }
    	else if ($action=='deletethumbnails') {
	    pnSessionSetVar('statusmsg',_USERPICTURESDELETEDTHUMBNAILS.": ".pnModAPIFunc('UserPictures','admin','deletethumbnails'));
	    }
    	else if ($action=='send') {
	    $thumbnailsize=pnVarCleanFromInput('thumbnailsize');
	    $avatarsize=pnVarCleanFromInput('avatarsize');
	    $datadir=pnVarCleanFromInput('datadir');
	    if (!isset($datadir) || (!(strlen($datadir)>0))) $datadir="modules/UserPictures/data/";
	    $activated=pnVarCleanFromInput('activated');
	    if ($activated!=1) $activated=0;
	    $hint=pnVarCleanFromInput('hint');
	    if ($hint!=1) $hint=0;
	    $avatarmanagement=pnVarCleanFromInput('avatarmanagement');
	    if ($avatarmanagement!=1) $avatarmanagement=0;
	    $maxfilesize=pnVarCleanFromInput('maxfilesize');
	    if (!($maxfilesize>0)) $maxfilesize=1500;
	    $ownuploads=pnVarCleanFromInput('ownuploads');
	    if (!($ownuploads>0)) $ownuploads=0;
	    $convert=pnVarCleanFromInput('convert');
	    if (!(strlen($convert)>0)) $convert='/usr/bin/convert';
	    $disabledtext=pnVarCleanFromInput('disabledtext');
	    $verifytext=pnVarCleanFromInput('verifytext');
	    $tc = pnVarCleanFromInput('thumbnailcreation');

	    $maxwidth=pnVarCleanFromInput('maxwidth');
	    if (!($maxwidth>0)) $maxwidth=800;
	    $maxheight=pnVarCleanFromInput('maxheight');
	    if (!($maxheight>0)) $maxheight=600;

	    // set new value for module var
	    pnModSetVar('UserPictures','thumbnailsize',$thumbnailsize);
	    pnModSetVar('UserPictures','avatarsize',$avatarsize);
	    pnModSetVar('UserPictures','activated',$activated);
	    pnModSetVar('UserPictures','avatarmanagement',$avatarmanagement);
	    pnModSetVar('UserPictures','verifytext',$verifytext);
	    pnModSetVar('UserPictures','disabledtext',$disabledtext);
	    pnModSetVar('UserPictures','maxfilesize',$maxfilesize);
	    pnModSetVar('UserPictures','convert',$convert);
	    pnModSetVar('UserPictures','ownuploads',$ownuploads);
	    pnModSetVar('UserPictures','maxwidth',$maxwidth);
	    pnModSetVar('UserPictures','maxheight',$maxheight);
	    pnModSetVar('UserPictures','datadir',$datadir);
	    pnModSetVar('UserPictures','thumbnailcreation',$tc);
	    pnModSetVar('UserPictures','hint',$hint);
	}
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');

    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_main.htm');
}

/**
 * delete form for picture-administration
 *
 * @author       The PostNuke Development Team
 * @return       output       The main module admin page.
 */
function UserPictures_admin_deletePicture()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    $action=pnVarCleanFromInput('action');
    if (isset($action)) {
	// auth-key check here!
	if (!pnSecConfirmAuthKey()) {
    	    pnSessionSetVar('errormsg', _BADAUTHKEY);
	    }
	else if ($action=='delete') {
	    $picture_id=pnVarCleanFromInput('picture_id');
	    if (pnModAPIFunc('UserPictures','admin','deletePicture',array('picture_id'=>$picture_id))) pnSessionSetVar('statusmsg',_USERPICTURESDELETED);
	    else pnSessionSetVar('errormsg',_USERPICTURESDELETEERROR);
	}
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');


    $ugall=pnVarCleanFromInput('ugall');
    $uid=pnVarCleanFromInput('uid');

    $pnRender->assign('uid',$uid);

    $pnRender->assign('picture_id',pnVarCleanFromInput('picture_id'));

    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_deletepicture.htm');
}

/**
 * find orphans
 *
 * @return       output       The main module admin page.
 */
function UserPictures_admin_findOrphans()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    $action=pnVarCleanFromInput('action');
    if (isset($action)) {
	// auth-key check here!
	if (!pnSecConfirmAuthKey()) {
    	    pnSessionSetVar('errormsg', _BADAUTHKEY);
	    }
	else if ($action=='deletefiles') {
	    pnModAPIFunc('UserPictures','admin','getOrphanFiles',array('delete'=>1));
	    pnSessionSetVar('statusmsg',_USERPICTURESFILESDELETED);
	}
	else if ($action=='deletedbfiles') {
	    pnModAPIFunc('UserPictures','admin','getOrphanDBFiles',array('delete'=>1));
	    pnSessionSetVar('statusmsg',_USERPICTURESDBFILESDELETED);
	}
	else if ($action=='deleteorphanpics') {
	    pnModAPIFunc('UserPictures','admin','getOrphanPictures',array('delete'=>1));
	    pnSessionSetVar('statusmsg',_USERPICTURESORPHANPICSDELETED);
	}
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');

    $pics=pnModAPIFunc('UserPictures','admin','getOrphanPictures');
    $pnRender->assign('pics',$pics);

    $files=pnModAPIFunc('UserPictures','admin','getOrphanFiles');
    $pnRender->assign('files',$files);
    $pnRender->assign('amount',pnModAPIFunc('UserPictures','admin','getNumberOfFiles'));

    $dbfiles=pnModAPIFunc('UserPictures','admin','getOrphanDBFiles');
    $pnRender->assign('dbfiles',$dbfiles);

    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_findorphans.htm');
}

/**
 * the main administration function for browsing stored images
 *
 * @return       output       The main module admin page.
 */
function UserPictures_admin_browser()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');

    // get templates
    $template_id=pnVarCleanFromInput('template_id');
    if (isset($template_id) && ($template_id>=0)) {
	$template=pnModAPIFunc('UserPictures','admin','getTemplates',array('template_id'=>$template_id));
	$pnRender->assign('template',$template);
	$pictures=pnModAPIFunc('UserPictures','user','getPictures',array('template_id'=>$template_id));
	$pnRender->assign('picturesCounter',count($pictures));
	$startnum=pnVarCleanFromInput('startnum');
	if (!isset($startnum) || (!($startnum>=0))) $startnum=1;
	$startnum--;
	for ($i=$startnum;$i<=($startnum+20);$i++) if ($pictures[$i][filename]!='') $pics[]=$pictures[$i];
	$pnRender->assign('startnum',$startnum);
	$pnRender->assign('pictures',$pics);
    }

    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_browser.htm');
}

/**
 * the main administration function for browsing stored images that have to be activated
 *
 * @return       output       The main module admin page.
 */
function UserPictures_admin_toactivate()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');

    $action=pnVarCleanFromInput('action');
    if (isset($action) && ($action=='activate')) {
	// auth key check here
	if (!pnSecConfirmAuthKey()) {
    	    pnSessionSetVar('errormsg', _BADAUTHKEY);
	    }
	else {
	    $template_id=pnVarCleanFromInput('template_id');
	    $uid=pnVarCleanFromInput('uid');
	    if (pnModAPIFunc('UserPictures','admin','activatePicture',array('template_id'=>$template_id,'uid'=>$uid))) pnSessionSetVar('statusmsg',_USERPICTURESACTIVATED);
	    else pnSessionSetVar('errormsg',_USERPICTUREACTIVATEFAILED);
	}
    }


    // get templates
    $templates=pnModAPIFunc('UserPictures','admin','getTemplates');
    $pictures=array();
    $i=0;
    foreach ($templates as $template) {
	if ($template[to_verify]=='1')	{
	    $p=pnModAPIFunc('UserPictures','user','getPictures',array('template_id'=>$template[id],'verified'=>0));
	    $pictures=array_merge($p,$pictures);
	    $i++;
	}
	if ($i==20) break;
    }
    $pnRender->assign('pictures',$pictures);
    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_toactivate.htm');
}

/**
 * the main administration function for template amnagement
 *
 * @author       The PostNuke Development Team
 * @return       output       The main module admin page.
 */
function UserPictures_admin_templates()
{
    // Security check
    if (!pnSecAuthAction(0, 'UserPictures::', '::', ACCESS_EDIT)) {
        return pnVarPrepHTMLDisplay(_MODULENOAUTH);
    }

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender =& new pnRender('UserPictures');

    $action=pnVarCleanFromInput('action');
    if (isset($action)) {
	// implement auth-key-check here later...

	if ($action=='delete') {
	    // delete all uploaded pictures associated with the template
	    list($template_id)=pnVarCleanFromInput('template_id');
	    $pictures=pnModAPIFunc('UserPictures','user','getPictures',array('template_id'=>$template_id));
	    foreach ($pictures as $picture) {
		if (!pnModAPIFunc('UserPictures','user','deletePicture',array('uid'=>$picture[uid],'template_id'=>$picture[template_id]))) {
		    pnSessionSetVar('statusmsg',_DELETEERROR); 
		    return pnRedirect(pnModURL('UserPictures','admin','templates'));
		}
	    }
	    if (!pnModAPIFunc('UserPictures','admin','deleteTemplate',array('template_id'=>$template_id))) pnSessionSetVar('statusmsg',_DELETEERROR);
	    pnSessionSetVar('statusmsg',_USERPICTURESDELETED);
	}	
	else if ($action=='edit') {
	    // get stored data and assign this data
	    $template=pnModAPIFunc('UserPictures','admin','getTemplates',array('template_id'=>pnVarCleanFromInput('template_id')));
	    // assign
	    $pnRender->assign('id',		$template[id]);
	    $pnRender->assign('title',		$template[title]);
	    $pnRender->assign('max_width',	$template[max_width]);
	    $pnRender->assign('max_height',	$template[max_height]);
	    $pnRender->assign('defaultimage',	$template[defaultimage]);
	    $pnRender->assign('to_verify',	$template[to_verify]);
	}
	else if ($action=='send') {
	    list (	$id,
			$title,
			$max_width,
			$max_height,
			$defaultimage,
			$to_verify	) = pnVarCleanFromInput(  'id',
								  'title',
								  'max_width',
								  'max_height',
								  'defaultimage',
								  'to_verify'
								    );
	    $pnRender->assign('id',		$id);
	    $pnRender->assign('title',		$title);
	    $pnRender->assign('max_width',	$max_width);
	    $pnRender->assign('max_height',	$max_height);
	    $pnRender->assign('defaultimage',	$defaultimage);
	    $pnRender->assign('to_verify',	$to_verify);

	    // verify the input
	    $flag=false;
	    if (!(strlen($title)>0)) {
		$flag=true;
		pnSessionSetVar('errormsg',_USERPICTURESNOTITLE);
	    }
	    if (!($max_width>0)) {
		$flag=true;
		pnSessionSetVar('errormsg',_USERPICTURESNOWITDH);
	    }
	    if (!($max_height>0)) {
		$flag=true;
		pnSessionSetVar('errormsg',_USERPICTURESNOHEIGHT);
	    }
	    if (!$flag) {
		if (pnModAPIFunc('UserPictures','admin','storeTemplate',array('id'=>$id,'title'=>$title,'max_width'=>$max_width,'max_height'=>$max_height,'defaultimage'=>$defaultimage,'to_verify'=>$to_verify))) {
		    pnSessionSetVar('statusmsg',_USERPICTURESSETTINGSSTORED);
		    return pnRedirect(pnModURL('UserPictures','admin','templates'));
		}
		else pnSessionSetVar('errormsg',_USERPICTURESERRORSAVING);
	    }
	}
    }

    // Return the output that has been generated by this function
    return $pnRender->fetch('userpictures_admin_templates.htm');
}


?>